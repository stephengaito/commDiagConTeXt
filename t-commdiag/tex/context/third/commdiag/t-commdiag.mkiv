% A ConTeXt MkIV module

% from file: preamble.tex after line: 0

%D \module
%D   [     file=t-commdiag,
%D      version=2018.08.07,
%D        title=\CONTEXT\ User module,
%D     subtitle=Commutative Diagrams for \ConTeXt\,
%D       author=Stephen Gaito,
%D         date=\currentdate,
%D    copyright=PerceptiSys Ltd (Stephen Gaito),
%D        email=stephen@perceptisys.co.uk,
%D      license=MIT License]

%C Copyright (C) 2018 PerceptiSys Ltd (Stephen Gaito)
%C
%C Permission is hereby granted, free of charge, to any person obtaining a
%C copy of this software and associated documentation files (the
%C "Software"), to deal in the Software without restriction, including
%C without limitation the rights to use, copy, modify, merge, publish,
%C distribute, sublicense, and/or sell copies of the Software, and to
%C permit persons to whom the Software is furnished to do so, subject to
%C the following conditions:
%C
%C The above copyright notice and this permission notice shall be included
%C in all copies or substantial portions of the Software.
%C
%C THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
%C OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
%C MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
%C IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
%C CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
%C TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
%C SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

% begin info
%
% title   : Commutative Diagrams for ConTeXt
% comment : Provides structured document and code generation
% status  : under development, mkiv only
%
% end info

% the following IMMEDIATELY loads our t-commdiag.mpiv file into EVERY
% instance which allows extensions
%
%\startMPextensions
%  input t-commdiag.mpiv
%\stopMPextensions

% the following (dealayed) loads our t-commdiag.mpiv file into ONLY the
% metafun (default) instance.
%
\startMPdefinitions {metafun}
    if unknown commdiag_macros : input t-commdiag.mpiv ; fi ;
\stopMPdefinitions

% from file: preamble.tex after line: 50

\usemodule[literate-progs]

\unprotect

\ctxloadluafile{t-commdiag}

% from file: macros.tex after line: 0

\defineMPinstance
  [commDiag]
  [
    format=metafun,
    extensions=yes,
    initializations=yes,
    method=double
  ]
 
\startMPdefinitions{commDiag}
  def setupCommDiags =
    picture objLabel[][];
    picture arrLabel[][][][];
    numeric hasArrow[][][][];
    string aPos[][][][];
    pair w[][];
    path aLine;
    pair aBegin;
    pair aEnd;
    numeric numRows; numRows := 0;
    numeric numCols; numCols := 0;
  enddef ;

  def updateRowsCols(expr i, j) =
    if numRows < i : numRows := i; fi ;
    if numCols < j : numCols := j; fi ;
  enddef;
 
  def addObject(expr row, col, aLabel) =
    updateRowsCols(row, col);
    objLabel[row][col] := thelabel("$"&aLabel&"$", origin);
  enddef ;

  def drawObjects(expr rowWidth, colWidth) =
    for i = 1 upto numRows :
      for j = 1 upto numCols :
        w[i][j] = (j*colWidth*cm, (-i)*rowWidth*cm);
        objLabel[i][j] := objLabel[i][j] shifted w[i][j];
        draw objLabel[i][j];
      endfor;
    endfor;
  enddef;
 
  def addArrow(expr fRow, fCol, tRow, tCol)(expr aLabel)(suffix position)(expr bend) =
    aLine  := w[fRow][fCol] .. w[tRow][tCol];
    aBegin := aLine intersectionpoint objLabel[fRow][fCol] enlarged 0.15cm ;
    aEnd   := aLine intersectionpoint objLabel[tRow][tCol] enlarged 0.15cm ;
    path anArrow;
    anArrow := aBegin .. aEnd;
    drawarrow anArrow ;
    if 0 < length(aLabel) :
      picture aLabelPic;
      aLabelPic := thelabel("$"&aLabel&"$", origin ) ;
      pair aLabelPt;
      aLabelPt := point 0.5 of anArrow;
      label position (aLabelPic, aLabelPt) ;
    fi;
  enddef;
\stopMPdefinitions

% from file: conclusion.tex after line: 0

\protect \endinput